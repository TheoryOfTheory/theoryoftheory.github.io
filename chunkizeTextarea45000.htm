<!DOCTYPE html>
<html>
<head>
<link rel="icon" type="image/png" href="https://icons.iconarchive.com/icons/icons8/windows-8/256/Science-Divide-2-icon.png">
<script src="https://theoryoftheory.github.io/hello_world.wasm"></script>
<script>
// NEW-PROMISE navigator.clipboard.writeText("blah")/Clipboard.write() =, DEBUGGING document needs focus vs copy("blah") vs OLD document.execCommand("copy") 
function fallbackCopyTextToClipboard(text) {
  var textArea = document.createElement("textarea");
  textArea.value = text;
  
  // Avoid scrolling to bottom
  textArea.style.top = "0";
  textArea.style.left = "0";
  textArea.style.position = "fixed";

  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();

  try {
    var successful = document.execCommand('copy');
    var msg = successful ? 'successful' : 'unsuccessful';
    console.log('Fallback: Copying text command was ' + msg);
  } catch (err) {
    console.error('Fallback: Oops, unable to copy', err);
  }

  document.body.removeChild(textArea);
}
function copyTextToClipboard(text) {
  if (!navigator.clipboard) {
    fallbackCopyTextToClipboard(text);
    return;
  }
  navigator.clipboard.writeText(text).then(function() {
    console.log('Async: Copying to clipboard was successful!');
  }, function(err) {
    console.error('Async: Could not copy text: ', err);
  });
}
function copyJSArrayToClipboard(aArray) { 
// function copyRTFHTML_to_clipboard(sHTML) {
    // copy rich text format / html to clipboard
    //OLD let myArray = [['1', '2', '3\n3.5'], ['4', '5', '6'], ['7', '8', '9']]; //let myArray = [['1', '2', '3&#13;3.5'], ['4', '5', '6'], ['7', '8', '9']];
    //eg: 
    // let aArray = [['1', '2', '3<br />3.5'], ['4', '5', '6'], ['7', '8', '9']]; copyJSArrayToClipboard(aArray);
    
    // let myString = myArray.reduce((acc, val) => acc + val.join('\t') + '\n', '');


    // ATTEMPT 1
    // let copyEvent = new ClipboardEvent('copy', {
    //    clipboardData: new DataTransfer(),
    // });
    // copyEvent.clipboardData.setData('text/plain', myString);
    // copyEvent.clipboardData.setData('text/html', '<table><tbody><tr><td>' + myString.replace(/\n/g, '</td></tr><tr><td>') + '</td></tr></tbody></table>');
    //document.dispatchEvent(copyEvent);

    // ATTEMPT 2
    /*
    document.addEventListener('copy', function(e) {
      // e.clipboardData is initially empty, but we can set it to the
      // data that we want copied onto the clipboard.
      e.clipboardData.setData('text/plain', 'Hello, world!');
      e.clipboardData.setData('text/html', '<b>Hello, world!</b>');
    
      // This is necessary to prevent the current document selection from
      // being written to the clipboard.
      e.preventDefault();
    });
    */

    // ATTEMPT 3 // https://www.nikouusitalo.com/blog/why-isnt-clipboard-write-copying-my-richtext-html/
    // Error due to text/html and text/plain at teh samem time - : TypeError - Failed to execute 'write' on 'Clipboard': The object must have a callable @@iterator property.
    /*
    function setClipboard(text) {
        // const type = "text/html";
        // const blob = new Blob([text], { type });
        // let data = [new ClipboardItem({ [type]: blob })];
        alert(text);
        let data = new ClipboardItem({
        "text/plain": new Blob(
            ["test"],
            { type: "text/plain" }
        ),
        "text/html": new Blob(
            ["<div style='color:red'>test<div>"],
            { type: "text/html" }
        ),
      });
      
      navigator.clipboard.write(data).then(
        () => {
          alert("success");    

        },
        (err) => {
            alert(`Error: ${err.name} - ${err.message}`);
        }
      );
    }
    setClipboard(toHTMLTable(aArray));
    // chatgpt - how do i fix this code.. I get this error: Error: TypeError - Failed to execute 'write' on 'Clipboard': The object must have a callable @@iterator property.
    */

    // ATTEMPT 4 - refactoring notes: use ATTEMPT 3 to figure out how to incorporate both text/plain and text/html at the same time
    /*          
            if ($$$$("#copyJSArrayToClipboardCOLORCHECKBOX").checked) {
          sBackgroundColor = $$$$("#copyJSArrayToClipboardCOLOR").value;
      } else {
          sBackgroundColor = "white";
      }      
      sHTMLTable = toHTMLTable(aArray, undefined, "#copyJSArrayToClipboard", 0);
      sHTMLTable = sHTMLTable.replace(/table /, "table style='text-align: left; background-color:" + sBackgroundColor  + ";'");
      // <style> no funciona - i guess navigator.clipboard.write can't accept <style> html?
      // sHTMLTable = "<style>#copyJSArrayToClipboard { text-align: left; } </style>" + sHTMLTable;

      var type = "text/html";
      // var type = "text/plain";
      var blob = new Blob([sHTMLTable], { type });
      var data = [new ClipboardItem({ [type]: blob })];
    
      navigator.clipboard.write(data).then(
        () => {
          alert("success, now paste the HTML/RTF content in the clipboard onto an RTF-receptive platform (eg an externally-selected googlesheet cell");    
        },
        (err) => {
            alert(`Error: ${err.name} - ${err.message}`);
        }
      );
      */
      // ATTEMPT 5 - allowed both text/html and text/plain onto clipboard
      if ($$$$("#copyJSArrayToClipboardCOLORCHECKBOX").checked) {
          sBackgroundColor = $$$$("#copyJSArrayToClipboardCOLOR").value;
      } else {
          sBackgroundColor = "white";
      }      
      sHTMLTable = toHTMLTable(aArray, undefined, "#copyJSArrayToClipboard", 0);
      sHTMLTable = sHTMLTable.replace(/table /, "table style='text-align: left; background-color:" + sBackgroundColor  + ";'");
          dom_copyHTMLToClipboard(sHTMLTable);
}
  
</script>
<script>
function copyall() {
    sText = $$$a(".chunk50000").map(o=>o.value.replace(/\n/g, "¶").replace(/\r/g, "¶")).reduce((a,e,i)=>{return a + "\n" + e;}, "").trim()
    copyTextToClipboard(sText);
} 
</script>
<script>
function copyJSArrayToClipboardHELPER(sOrientation) {
        // let aArray = [['1', '2', '3<br />3.5'], ['4', '5', '6'], ['7', '8', '9']];
        // let aArray = [['1'], ['4'], ['7']];
    // let aArray = $$$a(".chunk50000").map(o=>[superhtmlEntities(o.value).substring(0,10)]);
    let aArray = $$$a(".chunk50000").map(o=>[superhtmlEntities(o.value)]);
    
    if (sOrientation == "tab/horizontal/transposed") {
        aArray = transpose(aArray);
    } else { // ""
        // do not tranpose
    }
    // copyTextToClipboard(toHTMLTable(aArray));
        copyJSArrayToClipboard(aArray);
}
function replaceNewlinesWithPilcrows() {
    $$$a('.chunk50000').forEach(o=>{ o.value = o.value.replace(/\n/g, '¶'); })
}
function replaceTabsWithRightarrows() {
    $$$a('.chunk50000').forEach(o=>{ o.value = o.value.replace(/\t/g, '⇒'); })
} 
function prefaceChunksWithChunkIndex() {
    $$$a(".chunk50000").forEach((o,i)=>{ o.value = "chunk " + i + "\n" + o.value });
}
</script>

<script src="https://yayinternets.github.io/datascripts.js"></script>
<script src="https://yayinternets.github.io/domscripts.js"></script>
<link rel="stylesheet" href="https://yayinternets.github.io/datacss.css">

        <title>Chunkize 45000/50000 textarea for gs cells</title>
        <script type="text/javascript">document.addEventListener("DOMContentLoaded", function(event) { 
                if (oGetAllParameters_CLIENT()?.chunksize) {
                    document.querySelectorAll("#chunksize")[0].value = oGetAllParameters_CLIENT()?.chunksize;
                    document.querySelectorAll("#myTextarea")[0].placeholder = "Paste text here in order to split into chunks of length " + oGetAllParameters_CLIENT().chunksize;
                } else {
                    document.querySelectorAll("#chunksize")[0].value = "45000";
                }

         }); </script>

<!-- pullleft, pushright, and refreshChunk50000Lengths (to be coded) -->
<script>
function pullleft(oButton, iNumOfChars) {
    oAllTextAreas = oButton.parentNode.parentNode.parentNode.querySelectorAll("TEXTAREA");
    oRightTextArea = oButton.parentNode.parentNode.querySelector("TEXTAREA");
    oLeftTextArea = oAllTextAreas[[Array.prototype.indexOf.call(oAllTextAreas, oRightTextArea) - 1]]
    sNew_oLeftTextArea = oLeftTextArea.value + oRightTextArea.value.substring(0, iNumOfChars)
    sNew_oRightTextArea = oRightTextArea.value.substring(iNumOfChars, oRightTextArea.value.length)
    
    oLeftTextArea.value = sNew_oLeftTextArea;
    oLeftTextArea.scrollTop = oLeftTextArea.scrollHeight;

    oRightTextArea.value = sNew_oRightTextArea;
    oRightTextArea.scrollTop = 0;

    refreshChunk50000Lengths();
}
function pushright(oButton, iNumOfChars) {
    oAllTextAreas = oButton.parentNode.parentNode.parentNode.querySelectorAll("TEXTAREA");
    oRightTextArea = oButton.parentNode.parentNode.querySelector("TEXTAREA");
    oLeftTextArea = oAllTextAreas[[Array.prototype.indexOf.call(oAllTextAreas, oRightTextArea) - 1]]
    sNew_oLeftTextArea = oLeftTextArea.value.substring(0, oLeftTextArea.value.length-iNumOfChars)
    sNew_oRightTextArea = oLeftTextArea.value.substring(oLeftTextArea.value.length-iNumOfChars, oLeftTextArea.value.length) + oRightTextArea.value;
    
    oLeftTextArea.value = sNew_oLeftTextArea;
    oLeftTextArea.scrollTop = oLeftTextArea.scrollHeight;
    
    oRightTextArea.value = sNew_oRightTextArea;
    oRightTextArea.scrollTop = 0;

    refreshChunk50000Lengths();
}
function refreshChunk50000Lengths() {
    // iterate through each textarea.chunk50000 and update the span.chunk50000length tag with the appropriate lengths
    // oSpan = document.querySelectorAll("span.chunkLength")[0];
    document.querySelectorAll("span.chunkLength").forEach(function(oSpan) {
        oSpan.innerText = oSpan.parentNode.querySelector("textarea").value.length + " characters long";
    })

}

</script>


</head>
<body>

<style>

textarea { width: 600px; height: 311px; }

.chunk50000 { background-color: lightcyan; }

</style>
<script>
function copyTextAreaIntoHTML() { document.body.innerHTML = $$$$("#myTextarea").value; }
function alternateCase(sText) {
    return sText.toLowerCase().split(" ").map(o=>o.split("").map((oo,ii)=>(ii % 2 === 0 ? oo.toLowerCase() : oo.toUpperCase())).join("")).join(" ")
}
</script>
  <div>
    <div> <!-- clipboard to text, text to clipboard, and text to htmlpage buttons --> 
      <button onclick="dom_copyHTMLFromClipboardIntoPlaintext()">📋&lt;/&gt; ➜ 📋🔤</button> <!-- "clipboard html blob to clipboard text blob" (aka "clipboard text/html blob to clipboard text/plain blob" -->
      <button onclick="dom_copyTextFromTextIntoClipboardHTML(); alert('need to finish find britney');">🔤🔲 ➜ 📋&lt;/&gt;</button> <!-- "textarea (textbox) to clipboard" -->
      <button onclick="alert('need to create/complete');">📋🔤 ➜ 📋&lt;/&gt;</button> <!-- "clipboard text to clipboard html" -->
      <button onclick="copyTextAreaIntoHTML()">🔤🔲 ➜ &lt;/&gt;📄</button> <!-- "textbox (textarea) to html page" -->
    </div>
    <div> <!-- text manipulation -->
            <button onclick="document.querySelectorAll('#myTextarea')[0].value = alternateCase(document.querySelectorAll('#myTextarea')[0].value);">aLtErNaTe</button>
    </div>
    <div style="background-color: rgb(249, 189, 215); "> <!-- PREPEND buttons --> 
      <button onclick="prependMarkdownListAsterisks();">prepend "* "</button><button onclick="prependMardownQuoteGreaterThan();">prepend "> "</button><button onclick="prependTab();">prepend tab</button><button onclick="prependSpace()">prepend " " (space)</button>
    </div>
  </div>
  <div><textarea id="myTextarea" placeholder="Paste text here in order to split into chunks of length 45000..." oninput="splitTextarea()"></textarea></div>

  <div>Total length=<span id="totallength"></span></div>

  
  <!-- regex find and replace -->
  <div id="findandreplace" style="background-color:rgb(242, 227, 235);">
    regex?<input checked="" type="checkbox" id="regex">
    ignorecase?<input checked="" type="checkbox" id="ignorecase"><br />
    
    <!-- javascript-style regexes -->
    <textarea style="font-size:7px; height:35px; width:300px;" id="input_find" row="3" col="3">\sdata-sheets-value="[^"]*"&#013;&#010;\sdata-sheets-textstyleruns="[^"]*"&#013;&#010;\sdata-sheets-hyperlinkruns="[^"]*"&#013;&#010;height:(\d+)px;\s*width:(\d+)px;\s&#013;&#010;\scolspan=1 rowspan=1&#013;&#010;background-color:#[0-9a-fA-F]{6};\s*color:#[0-9a-fA-F]{6};\s&#013;&#010;&lt;td style=&apos;&apos;&gt;&#013;&#010;dang_anything_else?</textarea>
    <textarea style="font-size:7px; height:35px; width:300px;" id="input_replace" row="3" col="3">&#013;&#010;&#013;&#010;&#013;&#010;&#013;&#010;&#013;&#010;&#013;&#010;&lt;td&gt;&#013;&#010;</textarea>

    <br />
    <button onclick="fFindAndReplace()">find and replace</button>
    <button onclick="regexMoiNotes()">display regex moinotes</button>
  </div>
  <script>
function fFindAndReplace() {
      // eg: " height:20px; width:285px;\nheight:20px; width:3005px;".replace(new RegExp("height:(\\d+)px;\\s*width:(\\d+)px;", "g"), "replaced")
      var sFind = $$$$("#input_find").value.split("\n")[0]; // split by linebreaks and choose the first because this textarea defaults with multiple regex optionsn to pick from
      var sReplace = $$$$("#input_replace").value.split("\n")[0]; // split by linebreaks and choose the first because this textarea defaults with multiple regex optionsn to pick from
      var sIG = (($$$$("#ignorecase").checked) ? "i" : "" ) + "g"; // ignore case, global
      // rRegex = new RegExp($$$$("#input_find").value, "g");
      if ($$$$("#regex").checked) {
        var rRegex = new RegExp(sFind, sIG);              
      } else {
        var rRegex = new RegExp(sFind.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), sIG); // this quick replace is a way to escape all the special regex characters so that I do an exact string literal search (yet still ultimately utilizing RegExp object) since I couldn't get a simpler, non-RegExp .match/.matchAll to work elegantly                                
      }
      var oNumOfMatches = $$$$("#myTextarea").value.match(rRegex);
      // console.log(oNumOfMatches);
      if (!oNumOfMatches) {
        alert("0 matches.");
      } else {
        var iNumOfMatches = oNumOfMatches.length;
        if (confirm(iNumOfMatches + " match" + (iNumOfMatches>1?"es":"") + ". Replace?")) {
          $$$$("#myTextarea").value = $$$$("#myTextarea").value.replace(rRegex, sReplace);

          // find and replace successfully completed.  now pop off the first rRegex token so I can press the button again and move to the next find and replace
          $$$$("#input_find").value = $$$$("#input_find").value.split("\n").slice(1).join("\n");
          $$$$("#input_replace").value = $$$$("#input_replace").value.split("\n").slice(1).join("\n");

        }
        splitTextarea();
      }     

    }
    
    function regexMoiNotes() {
        var myWindow = window.open("", "MsgWindow", "width=400,height=300");
        myWindow.document.write(`<div class="flex-col w-full"><article class="message prose prose-slate break-words"><p>Python and JavaScript do indeed have some differences in their regular expression (regex) syntax and capabilities, as their regex engines are not identical. Most of the core features of regular expressions are consistent across different programming languages, including basic patterns like literals, character classes, quantifiers, anchors, and grouping. However, there can be variations, particularly in more advanced features.</p>
        <p><strong>Python regex differences include:</strong></p>
        <ul>
        <li>Verbose regex: Python supports a verbose mode that allows regexes to be written across multiple lines and include comments, which JavaScript does not support natively.</li>
        <li>Named groups: Python's <code>re</code> module allows you to name capturing groups, which is a feature that until recently was not available in JavaScript.</li>
        <li>Lookbehind assertions: Python's <code>re</code> module historically supported both fixed-width positive and negative lookbehinds, whereas JavaScript only started supporting fixed-width lookbehinds natively in ES2018.</li>
        <li>Unicode Handling: The way Unicode is handled can differ. Python has a flag for making patterns Unicode-aware, whereas JavaScript's support for Unicode in regexes has evolved over time and may differ between environments.</li>
        </ul>
        <p><strong>Visual Studio Code's find and replace regex functionality</strong> is based on the JavaScript regex engine. Therefore, it largely follows JavaScript's regex syntax. However, it's worth noting that in a text editor environment, certain regex features might be slightly altered or extended to fit the text editing use case.</p>
        <p>The term for these different regex "flavors" or "dialects" stems from the underlying regex engine they are built on. For example:</p>
        <ul>
        <li>Python's regex syntax is based on the <code>re</code> module's syntax.</li>
        <li>JavaScript's regex syntax is built in line with the ECMAScript standard for regex.</li>
        <li>Perl has its own flavor of regex, often referred to as PCRE (Perl Compatible Regular Expressions), which is also used in many other environments due to its rich feature set. moinotes: This is used in bash's rename utility ("brew install rename")</li>
        <li>.NET has its own regex library with particular features like right-to-left matching.</li>
        <li>POSIX regex, which comes in two flavors: BRE (Basic Regular Expressions) and ERE (Extended Regular Expressions), seen in tools like <code>grep</code> (BRE by default) and <code>egrep</code> (ERE by default).</li>
        </ul>
        <p>Many programming languages and tools document their specific regex features and syntax, so it's always good to consult the official documentation when writing regexes for a particular environment.</p></article></div>`);
    }
    // britney
    function dom_copyTextFromTextIntoClipboardHTML(sText) { // <button onclick="dom_copyTextFromTextIntoClipboardHTML">🔤➜📋</button>
        sTest = `<table><tbody><tr><td>What's the opposite of instrumentalism? Is it structuralism (Althusser), <a href="https://plato.stanford.edu/entries/scientific-realism/">scientific realism</a>, pragmatism (Dewey), or <a href="https://plato.stanford.edu/entries/heidegger/#Bei">Mitsein/"being-with"</a> (Heidegger)? I've seen it all.</td></tr></tbody></table>`;
                    var data = [new ClipboardItem({
                      ["text/html"]: new Blob([sTest], { type: "text/html" }),
                      ["text/plain"]: new Blob(["There are two blobs on the clipboard: a text/html blob (📋</> aka 'clipboard html') and this text/plain blob (📋🔤 aka 'clipboard plaintext') you're seeing, so disregard this one and try pasting onto a word doc or a googlesheet cell to see the html rendering.  Or click on chunkizeTextarea45000.htm's '📋</> ➜ 📋🔤' button to see the text/html blob stripped out into plaintext."], { type: "text/plain" })
                    })];

                    navigator.clipboard.write(data).then(
                      () => {
                        alert("successful navigator.clipboard.read and then navigator.clipboard.write of ClipboardItem with both text/html and text/plain Blobs.");    
                      },
                      (err) => {
                        alert(`Error: ${err.name} - ${err.message}`);
                      }
                    );
        console.log("completed.");
    }   
    
    </script>
  
  
<br />  

<script>
  // consider merging these into a single function?  note how .trim() mebbie shouldn't be used in all of them?  idk..
  function prependMarkdownListAsterisks() {
      $$$$("#myTextarea").value = $$$$("#myTextarea").value.trim().split("\n").map(o=>"* " + o).join("\n")+ "\n* \n* \n* \n* \n* \n* \n* ";
  }
  function prependMardownQuoteGreaterThan() {
      $$$$("#myTextarea").value = $$$$("#myTextarea").value.trim().split("\n").map(o=>"> " + o).join("\n")+ "\n> \n> \n> \n> \n> \n> \n> ";
  }
  function prependTab() {
      $$$$("#myTextarea").value = $$$$("#myTextarea").value.trim().split("\n").map(o=>"\t" + o).join("\n")+ "";
  }  
  function prependSpace() {
        $$$$("#myTextarea").value = $$$$("#myTextarea").value.split("\n").map(o=>" " + o).join("\n")+ "\n \n \n \n \n \n \n ";
  }
</script>
<br /><br />
<br /><br />
<a href="https://html-cleaner.com">html-cleaner</a> - find a vanilla javascript library replicates this site's tools<br />
<br />

<div style="background-color: rgb(249, 189, 215);">Paste in large data above and textareas of gs-friendly <input id="chunksize" onblur="splitTextarea();" style="width:50px;">-sized chunks will appear below.&nbsp;<a href="https://theoryoftheory.github.io/chunkizeTextarea45000.htm?chunksize=150">click here</a> for 150-sized chunks. <br />
            
<div style="background-color: rgb(249, 189, 215);"><button onclick="copyall()">Copy All - dom_copyall?</button></div>

            <br />
<div style="background-color: rgb(249, 189, 215);">background color?&nbsp;<input checked type="checkbox" id="copyJSArrayToClipboardCOLORCHECKBOX"><input type="color" id="copyJSArrayToClipboardCOLOR" name="copyJSArrayToClipboardCOLOR" value="#90EE90" oninput="updateColorValue(this.value)"><span id="backgroundcolor">HEX: #90EE90 / RGB: rgb(144, 238, 144)</span></div>
            <script>
              function updateColorValue(hex) {
                const rgb = hexToRgb(hex);
                document.getElementById('backgroundcolor').textContent = `HEX: ${hex.toUpperCase()} / RGB: ${rgb}`;
              }

              function hexToRgb(hex) {
                const r = parseInt(hex.slice(1, 3), 16);
                const g = parseInt(hex.slice(3, 5), 16);
                const b = parseInt(hex.slice(5, 7), 16);
                return `rgb(${r}, ${g}, ${b})`;
              }
            </script>
            
            <div style="background-color: rgb(249, 189, 215);">
              <button onclick="copyJSArrayToClipboardHELPER('newline/vertical/normal')">Copy All (رَأسِيّ) Vertical- ⊟🔤 ➜ ┋📋</button> <!-- copyJSArrayToClipboard newline/vertical/normal -->
              <button onclick="copyJSArrayToClipboardHELPER('tab/horizontal/transposed')">Copy All (أفقي) Horizontal - ⊟🔤 ➜ ┉📋</button> <!-- copyJSArrayToClipboard tab/horizontal/transposed -->
            </div>
  
            <br />
            
            <div style="background-color: rgb(249, 189, 215);">
              <button onclick="replaceNewlinesWithPilcrows();">Replace newlines with ¶ilcrows</button>
              <button onclick="replaceTabsWithRightarrows();">Replace tabs with ⇒RightArrows</button>
                          <button onclick="prefaceChunksWithChunkIndex();">Preface Chunks w Chunk Index</button>
            </div>
          
        </div>
  <div style="background-color: rgb(249, 189, 215);">
        <div><input id="maximumNumberOfChunks" value="20"> maximum number of chunks</div>
  </div>
        <div id="numberOfChunks">There are a total of ??? chunks.</div>

        <div id="chunkedTextareas"></div>

        <script>
          function splitTextarea() {
            const textarea = document.getElementById("myTextarea");
            const chunkedTextareas = document.getElementById("chunkedTextareas");
            const text = textarea.value;
            var i50000 = parseInt($$$$("#chunksize").value); // 45000; // 50000?
            document.getElementById("totallength").innerText = textarea.value.length;

            if (text.length > i50000) {
              const chunks = [];

              for (let i = 0; i < text.length; i += i50000) {
                chunks.push(text.substring(i, i + i50000));
              }
              iMaximumNumberOfChunks = parseInt($$$$("#maximumNumberOfChunks").value);
              $$$$("#numberOfChunks").innerText = "There are a total of " + chunks.length + " chunk(s)";
              // 10/29/2023 - added superHTMLEntities after noticing code from cajamotora.Code.gs caused a failure in parsing
              chunkedTextareas.innerHTML = chunks.map((chunk, i) => `<br /><br /><div>` + ((i>0)? `<div><button onclick="pullleft(this, 100)">&lt;&lt;&lt;</button><button onclick="pullleft(this, 10)">&lt;&lt;</button><button onclick="pullleft(this, 1)">&lt;</button><button onclick="pushright(this, 1)">&gt;</button><button onclick="pushright(this, 10)">&gt;&gt;</button><button onclick="pushright(this, 100)">&gt;&gt;&gt;</button><br></div>` : "") + `<textarea class="chunk50000" onchange="refreshChunk50000Lengths()">${superhtmlEntities(chunk)}</textarea><br /><button onclick="copy">copy</button><span class='chunkLength'></span></div>`).slice(0,iMaximumNumberOfChunks).join("");
              refreshChunk50000Lengths();
            } else {
              chunkedTextareas.innerHTML = "";
            }
          }
        </script>
</body>
</html>