<!DOCTYPE html>
<html>
<head>
<script>
// NEW-PROMISE navigator.clipboard.writeText("blah")/Clipboard.write() =, DEBUGGING document needs focus vs copy("blah") vs OLD document.execCommand("copy") 
function fallbackCopyTextToClipboard(text) {
  var textArea = document.createElement("textarea");
  textArea.value = text;
  
  // Avoid scrolling to bottom
  textArea.style.top = "0";
  textArea.style.left = "0";
  textArea.style.position = "fixed";

  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();

  try {
    var successful = document.execCommand('copy');
    var msg = successful ? 'successful' : 'unsuccessful';
    console.log('Fallback: Copying text command was ' + msg);
  } catch (err) {
    console.error('Fallback: Oops, unable to copy', err);
  }

  document.body.removeChild(textArea);
}
function copyTextToClipboard(text) {
  if (!navigator.clipboard) {
    fallbackCopyTextToClipboard(text);
    return;
  }
  navigator.clipboard.writeText(text).then(function() {
    console.log('Async: Copying to clipboard was successful!');
  }, function(err) {
    console.error('Async: Could not copy text: ', err);
  });
}
function copyJSArrayToClipboard(aArray) {
// function copyRTFHTML_to_clipboard(sHTML) {
    // copy rich text format / html to clipboard
    //OLD let myArray = [['1', '2', '3\n3.5'], ['4', '5', '6'], ['7', '8', '9']]; //let myArray = [['1', '2', '3&#13;3.5'], ['4', '5', '6'], ['7', '8', '9']];
    //eg: 
    // let aArray = [['1', '2', '3<br />3.5'], ['4', '5', '6'], ['7', '8', '9']]; copyJSArrayToClipboard(aArray);
    
    // let myString = myArray.reduce((acc, val) => acc + val.join('\t') + '\n', '');


    // ATTEMPT 1
    // let copyEvent = new ClipboardEvent('copy', {
    //    clipboardData: new DataTransfer(),
    // });
    // copyEvent.clipboardData.setData('text/plain', myString);
    // copyEvent.clipboardData.setData('text/html', '<table><tbody><tr><td>' + myString.replace(/\n/g, '</td></tr><tr><td>') + '</td></tr></tbody></table>');
    //document.dispatchEvent(copyEvent);

    // ATTEMPT 2
    /*
    document.addEventListener('copy', function(e) {
      // e.clipboardData is initially empty, but we can set it to the
      // data that we want copied onto the clipboard.
      e.clipboardData.setData('text/plain', 'Hello, world!');
      e.clipboardData.setData('text/html', '<b>Hello, world!</b>');
    
      // This is necessary to prevent the current document selection from
      // being written to the clipboard.
      e.preventDefault();
    });
    */

    // ATTEMPT 3 // https://www.nikouusitalo.com/blog/why-isnt-clipboard-write-copying-my-richtext-html/
    // Error due to text/html and text/plain at teh samem time - : TypeError - Failed to execute 'write' on 'Clipboard': The object must have a callable @@iterator property.
    /*
    function setClipboard(text) {
        // const type = "text/html";
        // const blob = new Blob([text], { type });
        // let data = [new ClipboardItem({ [type]: blob })];
        alert(text);
        let data = new ClipboardItem({
        "text/plain": new Blob(
            ["test"],
            { type: "text/plain" }
        ),
        "text/html": new Blob(
            ["<div style='color:red'>test<div>"],
            { type: "text/html" }
        ),
      });
      
      navigator.clipboard.write(data).then(
        () => {
          alert("success");    

        },
        (err) => {
            alert(`Error: ${err.name} - ${err.message}`);
        }
      );
    }
    setClipboard(toHTMLTable(aArray));
    // chatgpt - how do i fix this code.. I get this error: Error: TypeError - Failed to execute 'write' on 'Clipboard': The object must have a callable @@iterator property.
    */

    // ATTEMPT 4 - refactoring notes: use ATTEMPT 3 to figure out how to incorporate both text/plain and text/html at the same time
      sHTMLTable = toHTMLTable(aArray, undefined, "#copyJSArrayToClipboard");
      sHTMLTable = sHTMLTable.replace(/table /, "table style='text-align: left; '");
      // <style> no funciona - i guess navigator.clipboard.write can't accept <style> html?
      // sHTMLTable = "<style>#copyJSArrayToClipboard { text-align: left; } </style>" + sHTMLTable;

      var type = "text/html";
      // var type = "text/plain";
      var blob = new Blob([sHTMLTable], { type });
      var data = [new ClipboardItem({ [type]: blob })];
    
      navigator.clipboard.write(data).then(
        () => {
          alert("success, now paste the HTML/RTF content in the clipboard onto an RTF-receptive platform (eg an externally-selected googlesheet cell");    
        },
        (err) => {
            alert(`Error: ${err.name} - ${err.message}`);
        }
      );    
}  
</script>
<script>
function copyall() {
    sText = $$$a(".chunk50000").map(o=>o.value.replace(/\n/g, "¶").replace(/\r/g, "¶")).reduce((a,e,i)=>{return a + "\n" + e;}, "").trim()
    copyTextToClipboard(sText);
} 
</script>
<script>
function copyJSArrayToClipboardHELPER() {
        // let aArray = [['1', '2', '3<br />3.5'], ['4', '5', '6'], ['7', '8', '9']];
        // let aArray = [['1'], ['4'], ['7']];
    // let aArray = $$$a(".chunk50000").map(o=>[superhtmlEntities(o.value).substring(0,10)]);
    let aArray = $$$a(".chunk50000").map(o=>[superhtmlEntities(o.value)]);
    // copyTextToClipboard(toHTMLTable(aArray));
        copyJSArrayToClipboard(aArray);
}
</script>

<script src="https://yayinternets.github.io/datascripts.js"></script>
<script src="https://yayinternets.github.io/domscripts.js"></script>
<link rel="stylesheet" href="https://yayinternets.github.io/datacss.css">

        <title>Chunkize 45000/50000 textarea for gs cells</title>
        <script type="text/javascript">document.addEventListener("DOMContentLoaded", function(event) { 
                if (oGetAllParameters_CLIENT()?.chunksize) {
                    document.querySelectorAll("#chunksize")[0].value = oGetAllParameters_CLIENT()?.chunksize;
                } else {
                    document.querySelectorAll("#chunksize")[0].value = "45000";
                }

         }); </script>

</head>
<body>

<style>

textarea { width: 600px; height: 311px; }

.chunk50000 { background-color: lightcyan; }

</style>

        <textarea id="myTextarea" placeholder="Paste text here in order to split into chunks of length 45000..." oninput="splitTextarea()"></textarea><br /><br />
        <a href="https://html-cleaner.com">html-cleaner</a> - find a vanilla javascript library replicates this site's tools<br />
        <br /><a href="https://theoryoftheory.github.io/chunkizeTextarea45000.htm?chunksize=150">click here</a> for 150-sized chunks
        <div>Paste in large data above and textareas of gs-friendly <input id="chunksize"></input>-sized chunks will appear below: <button onclick="copyall()">Copy All - dom_copyall?</button><button onclick="copyJSArrayToClipboardHELPER()">Copy All - copyJSArrayToClipboard</button></div>
        <div id="chunkedTextareas"></div>

        <br /><br />

        <script>
                function splitTextarea() {
                        const textarea = document.getElementById("myTextarea");
                        const chunkedTextareas = document.getElementById("chunkedTextareas");
                        const text = textarea.value;
                        var i50000 = parseInt($$$$("#chunksize").value); // 45000; // 50000?

                        if (text.length > i50000) {
                                const chunks = [];

                                for (let i = 0; i < text.length; i += i50000) {
                                        chunks.push(text.substring(i, i + i50000));
                                }

                                chunkedTextareas.innerHTML = chunks.map(chunk => `<br /><br /><div><textarea class="chunk50000">${chunk}</textarea><br /><button onclick="copy">copy</button></div>`).join("");
                        } else {
                                chunkedTextareas.innerHTML = "";
                        }
                }
        </script>
</body>
</html>