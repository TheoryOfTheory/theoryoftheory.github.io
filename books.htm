<!-- 🎵 --><script type="text/javascript">document.addEventListener("DOMContentLoaded", function(event) { /* code */ }); </script>
<script src="https://yayinternets.github.io/datascripts.js"></script>
<script src="https://yayinternets.github.io/domscripts.js"></script>
<link rel="stylesheet" href="https://yayinternets.github.io/datacss.css">

<script src="https://cdn.jsdelivr.net/npm/wordcloud@1.2.2/src/wordcloud2.min.js"></script>

<style>
.domscripts_linkify { height:20pt; width: 20pt; }
</style>


<script>
// hacky tags - just add to the list
var sTags_global = `
// TAG guide - here are all the possible tags in this format: "exampletag exampletag2 exampletag3=exampletag3synonym=exampletag3synonym exampletag4 - description blah blah"
// and 96.1, and 95SX, and Kiss 95 too?  remember?

rare - could be deleted from internet at anytime?  backup?
findme - find me?
misheard - misheard lyrics that are noteworthy
yearning=whiney=whiny=whispy - whispy is a double ["Just as we in our yearning seek out unknown & nameless good, and as it moves, divining itself, like a wave-wound, whirling sea, akin to Plato's matter, following dark, uncertain law, incapable of constructing for itself anything enduring"](https://www.youtube.com/watch?v=jRcycn-jxgI&t=41m30s)
holiday=halloween=christmas
vitalismo=life=convivencia - Tools_for_Conviviality!!https://es.wikipedia.org/wiki/Iv%C3%A1n_Illich#La_convivencialidad [freundliches Zusammenleben](https://www.smry.ai/proxy?url=https://foreignpolicy.com/2024/06/30/revisiting-habermas-book-review-germany/?tpcc=recirc_latest062921) BuenVivir!!https://theoryoftheory.github.io/filosofos.htm

// era/period
eraish=50sish=60sish=70sish=90sish, 80sish - music that sounds like its from a specific decade but its not (AOT XXs eg 80s!!https://theoryoftheory.github.io/music.htm?tag=80s )
50s, 60s, 70s, 80s, 90s, 00s, 10s, classic - music from a specific decade (AOT XXsish eg 80sish!!https://theoryoftheory.github.io/music.htm?tag=80sish )

// work
work=amazonwork=tjswork=radioshackwork=innovawork - [work work work work](https://www.youtube.com/watch?v=HL1UzIK-flA)

trippy=psychedelic - ?????

# instrument
jazz, trumpet - Music becomes a unique and valuable way to open up the world or understand it in ways that are ignored by dogmatic ways of knowing (Smith 1994). As Deleuze and Guattari remark, "sound invades us, impels us, drags us, transpierces us.... its force of deterritorialization is the strongest, (and) it also effects the most massive of reterritorializations, the most numbing, the most redundant...flags can do nothing without trumpets
classical=piano - ???
synth=autotune, metal, guitar - ???

# geography
geography - ???
Miami - [Jodye Colliaye](https://theoryoftheory.github.io/music.htm?q=Jodye) MiamiMusicScene!!https://old.reddit.com/r/MiamiMusicScene/ , vs Boston!!https://theoryoftheory.github.io/music.htm?tag=boston
Boston - https://old.reddit.com/r/BostonMusic+Bostonology+BostonLocalMusic+BostonCalling vs Miami!!https://theoryoftheory.github.io/music.htm?tag=miami
WashingtonDC - ???
Charleston - ???
Spain - trujillo, lisbon, madrid

// languages
العربية=arabic - reddit.htm!!https://theoryoftheory.github.io/reddit.htm?search=arabic lenguas.htm!!https://theoryoftheory.github.io/lenguas.htm profilicities.htm!!https://theoryoftheory.github.io/profilicities.htm?search=arabic
deutsch=german - reddit.htm!!https://theoryoftheory.github.io/reddit.htm?search=german lenguas.htm!!https://theoryoftheory.github.io/lenguas.htm profilicities.htm!!https://theoryoftheory.github.io/profilicities.htm?search=german
español=espanol=spanish - reddit.htm!!https://theoryoftheory.github.io/reddit.htm?search=spanish lenguas.htm!!https://theoryoftheory.github.io/lenguas.htm profilicities.htm!!https://theoryoftheory.github.io/profilicities.htm?search=spanish and reddit.htm?español!!https://theoryoftheory.github.io/reddit.htm?search=español reddit.htm?paises!!https://theoryoftheory.github.io/reddit.htm?search=paises
nonenglish=japanese=jamaican=jamaica=portuguese=french=italian=hebrew=haitian=creole=maori=hawaiian=icelandic=russian - nonenglish (AND nonspanish/nongerman/nonarabic since those three are my priorities?  rename nonenglish to nonprioritylanguages? boutiquelanguages? )

// curators
ddb - @daviddeanburkhart!!https://www.youtube.com/@daviddeanburkhart
VisionApes=Prime8 - Prime8DaApe!!https://x.com/Prime8DaApe VisionApesRecComedy!!https://www.youtube.com/@VisionApesRecComedy/shorts Prime8!!https://www.youtube.com/channel/UCGyBKjehSOmxa-AyanEFRrg omg!!https://www.youtube.com/shorts/F0If8tPRnRA 
TheRoar, punk, trance, alt=indie=chill=lofi - listen to theRoar 88.1 now https://panthernow.com/theroar/ /r/shoegaze+dreampop!!https://old.reddit.com/r/shoegaze+dreampop
shoegaze=dreampop, TheRoar - /r/shoegaze+dreampop!!https://old.reddit.com/r/shoegaze+dreampop ![Io sono sempre vista](https://i.imgur.com/zNCSKJu.jpeg) https://old.reddit.com/r/lacan/comments/133zt3v/i_am_looking_for_a_drawing_of_a_tree_with_eyes/
starbucks - music from starbucks criticism!!https://old.reddit.com/r/starbucks/comments/189i98k/whoever_makes_the_starbucks_music_playlist_needs/ search!!https://old.reddit.com/r/starbucks/search/?q=music&include_over_18=on&restrict_sr=on&t=all&sort=new

// themed
sun, space - Georges Bataille: [The Potlatch with the Sun](https://academic.oup.com/columbia-scholarship-online/book/23458/chapter-abstract/184536720) Victor Pelevin's The Invincible Sun/Sol Invictus, which depicts Elagabalus as a key unrecognized spiritual figure https://en.wikipedia.org/wiki/Victor_Pelevin https://en.wikipedia.org/wiki/Elagabalus ![Nepobedimoe Solntse](https://m.media-amazon.com/images/I/81G2eI0ilQL._SL1500_.jpg)
fav=favs=favoritas=favsnew - reddit.htm?music!!https://theoryoftheory.github.io/reddit.htm?search=music jimmypop!!https://x.com/jimmypop
vocals=vocalization - nonword vocalization of sounds like trill, zzzz, yaaa, etc
double=triple=quadruple - shazamed multiple times ("must be important"?) or shazamed 3 times...why lol
theory=nickland=jungle - lemur playlist (Nick Land) @mandys1505!!https://www.youtube.com/@mandys1505 [Mandy's Playlist](https://www.youtube.com/playlist?list=PLBUEYfio8hoCkDtD_c92wMU0s6ko0EfsW) https://www.youtube.com/watch?v=RIW_PnkomYs /r/TheoryOfTheory+Dugin!!https://old.reddit.com/r/TheoryOfTheory+NickLand+Dugin+JuliusEvola
harmony, vocalization, instrumental - ???
pendiente=britney=wat=rare=why=wtf=todo=testing=bookmarksbar=deleteme - todo? pendiente
exercise=dance=hula=hulahoop=dopamine=peppy - get up and exercise!!https://theoryoftheory.github.io/reddit.htm?search=exercise
ñóh=chicochico=chico - ÑÓH!!https://old.reddit.com/r/Spanish/comments/16uk3tu/does_the_word_coño_mean_different_things_in/ y mas eufemismos?
soundslike=remindsme=sampled=samples=sample
college=highschool - college songs
redscare=redscarepod - RedScarePodMusic!!https://old.reddit.com/r/RedScarePodMusic/ or velourbathrobe!!https://www.youtube.com/@velourbathrobe aka Background_Step_8116!!https://old.reddit.com/user/Background_Step_8116
ad - this is for songs that were featured in an advertisement and thus i associate them with ads
overnight=clubmix=club, sunrise=sun - working overnight, sunrise
vierno=summer=Juneteenth, primavera=spring=Valentines, otoño=fall=autumn=Halloween, invierno=winter=Christmas - seasons
geometry=algebra=math - [Geometry & the Interior Life.pdf by Anthony Vincent Morley](https://theoryoftheory.github.io/searchtree.htm?search=Geometry%20%26%20the%20Interior%20Life)
cute - [cute accelerationism](https://theoryoftheory.github.io/searchtree.htm?search=%22cute%20accelerationism%22)

// genre
rap - reddit_htm_rap!!https://theoryoftheory.github.io/reddit.htm?search=rap
funk=reggaeton=reggae, soul=rnb - https://old.reddit.com/r/ArabFunk+DancandoFunk+DancarinasDoFunk+DeepFunk+FunkCarioca+FunkStyle+JapaneseFunk+NeuroFunk+NuFunk+Trans_Funk_pelada+Vinyl_Funk+bailefunk+funk+funk_adjacent+futurefunk/
chaotic=glitch=discordian=discordant, violent - James Gleick's ["Chaos: Making a New Science"](https://theoryoftheory.github.io/searchtree.htm?search=james%20gleick%20chaos) vs Guattari (Chaosmosis) vs Manuel Delanda's [Geometry and Chaos Theory](https://www.youtube.com/watch?v=y8JXyxRUy7E) vs Dugin's ![chaos star](https://upload.wikimedia.org/wikipedia/commons/f/f8/Chaos_Star.png)
magical=clouds=violin=whispy=raspy - not sure, magical? - Jung says "because the stars have fallen from the heavens, we have psychology .. we wouldn't have psychology without that because the world would be seen symbolically. Now you have to find your symbolic significance from within. ☿Footnotes2Plato!!https://www.youtube.com/watch?v=Bck92fuSWwI&loop=0
catchy, production, sampled - tiktok publication-able or sample-able? production are songs i should use in a video or whatevs



`;

var oTagsSynonymsGlobal = {};
// iterate through each line in the sTags_global string and build out the oTagsGlobal (and oTagsSynonymsGlobal) objects
var oTagsGlobal = sTags_global.trim().split("\n").reduce((oTagsAgg,e,i)=>{
    e = e.trim();
    if (!(e.startsWith("#") || e.startsWith("//") || e=="")) {
        sKey = e.split(" - ")[0].toLowerCase();
        
        // first split by "," (related tags) before splitting by "=" (synonym tags)
        aKeys = sKey.split(",")
            .map(ooo=>ooo.trim())
            .reduce((aaa,ooo,iii)=>{
                if (ooo.indexOf("=") > -1) { // console.log(ooo);
                    ooo.split("=").slice(1,).forEach((oooo,iiii)=>{
                        oTagsSynonymsGlobal[ooo.split("=")[iiii+1]] = ooo.split("=")[0];
                    })
                }
                aaa.push(ooo);
                return aaa;
        }, []);

        // ok now build out the clickable links
        sKeysTagLinks = aKeys.map(ssTag=>{return ssTag.split("=")
            .map(ssTagINCEPTIONS=>{
                // return ` ${ssTagINCEPTIONS}!!https://theoryoftheory.github.io/music.htm?tag=${ssTagINCEPTIONS} `
                return `<span style='color:#ADD8E6;' onclick='filtertags(this)'>${ssTagINCEPTIONS}</span>`
            // }).join("=");}).join(" ");
            }).join("=");}).join(" ");
        // sKeysTagLinks = domscripts_linkify(sKeysTagLinks, undefined, false).replaceAll("a> = <a", "a>=<a"); // the last hack allows me to get rid of extraneous spaces
        
        // ok lastly build out the oTagsAgg object that then becomes the oTagsGlobal object
        aKeys.forEach(ssTag=>{
            ssTag = ssTag.trim();
            var sValue = "";
            
            // ok now account for synonyms "="
            // a[ssTag.split("=")[0]] = sValue;
            ssTag.split("=").forEach((oooo,iiii)=>{
                // console.log(oTagsGlobal);

                var ssMasterSignifier = ssTag.split("=")[0].trim();

                if (oTagsAgg[ssTag]) { sValue = " " + oTagsAgg[ssTag] + " <span style='color:red !important'>||</span> "; } // make any existing key delimited red so that I can see I doubled the tag in the sTag variable data above (and so I don't lose info)
                sValue = sValue + sKeysTagLinks + " " + e.split(" - ").slice(1,).join(" - ");

                // collapse all "slave" synonyms into master signifier which is assumed to be the first token
                if(iiii == 0) { 
                    oTagsAgg[ssMasterSignifier] = sValue;
                } else { // if "slave" signifiers exist, they will be deleted from oTagsGlobal's reference to it and appended into its master signifier value
                    var ssCurrentSlaveSignifier = oooo.trim(); // ssTag.split("=")[iiii]?.trim();

                    if(oTagsAgg[ssCurrentSlaveSignifier]) {
                        
                        oTagsAgg[ssMasterSignifier] = oTagsAgg[ssMasterSignifier] + " ;;;; " +  oTagsAgg[ssCurrentSlaveSignifier];    
                        delete oTagsAgg[ssCurrentSlaveSignifier];
                    }
                }
                
            }) //*/
        })
        
    }
    return oTagsAgg;
    
}, {});

</script>

<script>window.addEventListener('load', function() {

    // document.body.innerHTML = document.body.innerHTML.replace("🎵MUSIC", "<span onclick='unfiltertags()'>🎵MUSIC🎵</span>");

    // dollarstore-markdown-ify - need to refactor but this is a mess and is only really specialized for my music playlist & daily list
    dollarstoreMarkdownSearchTreeify = function (bIncludeAHrefs) {
        // implement all of these? - https://www.markdownguide.org/cheat-sheet/
        sBody = document.body.innerText;
        bBulletPoint = false;
        var sCurrentTitleInIteration = ""; // aka if bBulletPoint = false?
        var sCommentComments = "";
        document.body.innerHTML = sBody.split("\n").reduce((a, o, i, e)=>{
            if (o.match(/^\# /g)) {
                var sTag = o.split(" - ")[0].replace(/^\# /g, "");
                var sValue = o.split(" - ").slice(1,).join(" - ");
                if (sValue) {} else { sValue = "fillervalue"; }
                sTag.split("=").forEach(ssTag=>{
                    ssTag = ssTag.trim();
                    //o = ssTag;
                    if (oTagsGlobal[ssTag]) { oTagsGlobal[ssTag] = oTagsGlobal[ssTag] + " ;;; " + sValue; } else { oTagsGlobal[ssTag] = sValue; }
                })
                
                sCurrentTitleInIteration = sTag; // o;
                o = o.replace(/^\# /g, "<h2>") + "</h2>"; return a + o;
            } else if (o.match(/^\## /g)) {
                o = o.replace(/^\## /g, "<h3>") + "</h3>"; return a + o;
            } else if (o.match(/^\### /g)) {
                o = o.replace(/^\### /g, "<h4>") + "</h4>"; return a + o;
            } else if ("match" == "* ") { // if o.trim()== "*", if "*" then <li></li>, if " *" then <li><li></li></li>, and so on.
                // if lastIterationWasNotBullet
                // <ul>
                bBulletPoint = true;
            } else if ("match" == "on bullet points, title!!url, and so on..") {
                
            } else { // if else then it's a song name eg "song name // tag, tag"
              // if else, then put in closing </ul>
              var sCurrentTitleInIterationTag = superhtmlEntities(sCurrentTitleInIteration.replaceAll(" ", "")).replaceAll("#", "");
              sSansHrefText = superurlify(o).text;
              sTextSansCommentTags = o.split(" // ")[0]?.trim();
              sCommentComments = o.split(" // ")[2]; (sCommentComments ? sCommentComments = sCommentComments : sCommentComments = "")
              // if (sCommentComments) { console.log(sCommentComments); }
              sArtistSong = sSansHrefText.split(" // ")[0]?.trim(); // remove the double slash tags from Artist - Song name
              if (sSansHrefText.split(" // ")[1]) { // eg "favs arabic sad"
                // console.log(sSansHrefText);
                sCommentTags = sSansHrefText.split(" // ")[1].trim();
                // sCommentTags = (sCommentTags + " " + sCurrentTitleInIterationTag).trim();
                sCommentTags = " // " + sCommentTags.split(" ").map(oo=>"<span onclick='filtertags(this);'>" + oo + "</span>").join(" ");
              } else {
                sCommentTags = "";
                // sCommentTags = " // "; // sCurrentTitleInIterationTag;
              }// extract tags/comment 
              // now add onclick to tags
              sCommentTags = sCommentTags + "<span style='display:none;' onclick='filtertags(this);'>" + sCurrentTitleInIterationTag + "</span>";
              
              var sArtistSongText = superurlify(sArtistSong).text;
              // but for now just dollarstore'ing this:
              if (bIncludeAHrefs) { // bIncludeAHrefs = just searchtree-ify whatever is on the line?  or introduce a notation?
                sHrefImFeelingLucky = `https://www.google.com/search?q=${superencode(sArtistSongText)}&btnI=I%27m+Feeling+Lucky`; // from google bard
                aHrefYoutube = `https://www.youtube.com/results?search_query=${superencode(sArtistSongText)}`; // youtube &loop=0
                aHrefDuck = `https://duckduckgo.com/?q=%5C${superencode(sArtistSongText)}`; // duckduckgo I'm feeling lucky, The %5c code above is the indicator for loading the page directly without search results (similar to the BtnI of Google)
                aHrefSearchTree = `https://theoryoftheory.github.io/searchtree.htm?search=${superencode(sArtistSongText)}`; // searchtree
                if (o.length>0) {
                     return a + `<div>
                     <span class='artistsong' data-artistsong='${superencode(sArtistSong)}'>
                     <a target='_blank' href='${sHrefImFeelingLucky}'>🍀</a>&nbsp;&nbsp;<a target='_blank' href='${aHrefYoutube}'>▶️</a>&nbsp;&nbsp;
                     <a target='_blank' href='${aHrefDuck}%20youtube'>🦆</a>&nbsp;&nbsp;
                     <a target='_blank' href='${aHrefDuck}%20lyrics'>📜</a>&nbsp;&nbsp;
                     <a target='_blank' href='${aHrefSearchTree}'>𓀂</a>&nbsp;&nbsp;
                     
                     <span style="font-size:7px;">${superurlify(sTextSansCommentTags).href}</span>
                     <span class='artistsong0'>${sArtistSongText}</span>
                     <span class='sCommentTags'>${sCommentTags}</span>
                     <span class='sCommentComments' style='font-size:6px;'>${sCommentComments}</span>
                     </div>`; //        
                } else {
                     return a + `<br>`
                }
              }
            }
        }, "");
    }
    dollarstoreMarkdownSearchTreeify(true);  

    // make secondary comments' links clickable and condense by making link titles the index
    $$$a(".sCommentComments").forEach(o=>{o.innerHTML = domscripts_linkify(o.innerHTML, "index") })
    $$$("img.domscripts_linkify").forEach(o=>o.outerHTML = `<a target="_blank" href='${o.src}'>${o.outerHTML}</a>`);


sSearchButton = `<div><input id="input_search" value="shoegaze"><button onclick='window.open("https://theoryoftheory.github.io/music.htm?q=" + document.querySelector("#input_search").value, "_self")'>search</button></div>`;
document.body.prependHTML(sSearchButton + "<br><canvas width='800' height='200'></canvas>");

setTimeout( function() { if (oGetAllParameters_CLIENT().q) { document.getElementById("input_search").value = oGetAllParameters_CLIENT().q; } }, 100);


}, false )</script>
<script type="text/javascript">document.addEventListener("DOMContentLoaded", function(event) { setTimeout(() => {

    // make comments clickable and in a wordcloud
    aTags = $$$a(".sCommentTags").map(o=>o.$$$a('span'))
        .reduce((a,e,i, aArray)=>{if(e) {a.push(e.slice(0, e.length-1))}; return a;}, []) // now push all tags except the last one (ie, the section title) onto the tag list
        .reduce((aa,ee,ii)=>{ ee.forEach((eee)=>{ if (true) { aa.push( eee.innerText.toLowerCase() ); } }); return aa; }, []);
    aTags = aTags.map(sSingleTag=>{  if (oTagsSynonymsGlobal[sSingleTag]) { sSingleTag = oTagsSynonymsGlobal[sSingleTag]; } return sSingleTag; })
    dom_WordCloudify(aTags, document.querySelector("canvas"), (sTag) => { filtertags(sTag.toLowerCase() ); } )
    

    
}, "2000"); }); </script>

<script>

function superurlify(text) { // converts text to {text: t, href, url } object to extract url;; mine - ?needs to be refactored into domscripts_linkify?
    var aURLMatches = text.match(/(https?:\/\/[^\s]+)/g); if (aURLMatches) {} else {aURLMatches = [];}
    var oReturn = {};
    text = text.replace(/(https?:\/\/[^\s]+)/g, "");
    oReturn.text = text; // it's okay for oReturn's text to be blank
    if (text=="") {
        text = aURLMatches.join(" ");
    }
    oReturn.href = "";
    if (aURLMatches) {
        // if (aURLMatches.length == 1) {
        //     oReturn.href = `<a target="_blank" href="${aURLMatches[0]}">${text}</a>`;
        // } else if (aURLMatches.length > 1) {
            // oReturn.href = `${text}` + aURLMatches.reduce((a,e,i)=>{return a + `<a href="${e}">link${i+1}</a>`}, "")
        oReturn.href = aURLMatches.reduce((a,e,i)=>{return a + `<a href="${e}">link${i+1}</a>`}, "");
        // }
    }
    // return text;
    return oReturn;
}

function filtertags(oTag) {
    if (typeof(oTag) == "string") { sTag = oTag.toLowerCase(); } else { sTag = oTag?.innerText.toLowerCase(); }

    sTag = sTag.replaceAll(",", "").toLowerCase(); // remove extraneous comma
    // replace tag with main synonym
    if (oTagsSynonymsGlobal[sTag]) { sTag = oTagsSynonymsGlobal[sTag]; }
    
    // causes page to crash for some reason
    // $$$("h2").forEach(o=>o.style.display = "none");

    $$$a(".artistsong").forEach(oArtistSong=>{
        //sCommentTag = oArtistSong.innerText.split("//")[1]?.trim();
        sCommentTag = oArtistSong.$$$$(".sCommentTags").$$$a("span").map(o=>o.innerText).join(" ");

        if (sCommentTag) {
            sCommentTag = sCommentTag.toLowerCase().replaceAll(",", " ").replaceAll("  ", " "); // remove extra commas and spaces

            aCommentTags = sCommentTag.split(" ").map(sSingleCommentTag=>{
                if (oTagsSynonymsGlobal[sSingleCommentTag]) { sSingleCommentTag = oTagsSynonymsGlobal[sSingleCommentTag]; }
                return sSingleCommentTag;
            })
        } else { sCommentTag = ""; aCommentTags = []; }
        
        if ((sCommentTag.length == 0) || (aCommentTags.indexOf(sTag) == -1)) {
            oArtistSong.style.display = "none";
        } else {
            // console.log(oArtistSong.style);
            oArtistSong.style.display = "";
        }
    })
    
    // ok now remove extraneous h2s and br's so that everything is listed together nice and neatly
    document.querySelectorAll("h2").forEach(o=>{o.style.display = "none";});
    document.querySelectorAll("br").forEach(o=>{o.style.display = "none";});
    // ok now unhide the first h2 and replace its contents with tag.  I originally wanted to just make this first one an <h1> but my dollartreemarkdownify implementation doesn't do h1s and my music notes doesn't do h3s???
    document.querySelectorAll("h2")[0].style.display = "";
    //console.log(sTag);
    //console.log(oTagsGlobal[sTag]);

    document.querySelectorAll("h2")[0].innerHTML = '<a href="https://theoryoftheory.github.io/music.htm?tag=' + sTag + '">' + sTag + '</a>' + ( oTagsGlobal[sTag] ? " - " + domscripts_linkify(oTagsGlobal[sTag], "domain") : "" );
    document.querySelectorAll("img.domscripts_linkify").forEach(o=>o.outerHTML = `<a target="_blank" href='${o.src}'>${o.outerHTML}</a>`);

    // britney - code here to replace contents of h1 with sTag name
    // dom_ahrefenumeratize(); //  ahrefenumeratizes the <ahrefenumerate> tag
}

function unfiltertags() { // restore visibility of all artist/songs
    $$$a(".artistsong").forEach(oArtistSong=>{
        oArtistSong.style.display = "";
    })
    document.querySelectorAll("h2").forEach(o=>{o.style.display = "";})
    document.querySelectorAll("br").forEach(o=>{o.style.display = "";})
    document.querySelectorAll("h2")[0].innerText = "�̵̰̓�̴̣̓M̷͈̂U̷̽͜S̸̰͝Ì̷͚C̸̦̀#̶͈́ ̶̭́n̴̗̔o̶̅͜t̷͔̿ë̶͇́;";
    // glitch effect - testing 
}
</script>

<script type="text/javascript">document.addEventListener("DOMContentLoaded", function(event) { dom_changeTitleAndFavicon("موسيقى", "♬🎼" ); }); </script>
<script type="text/javascript">document.addEventListener("DOMContentLoaded", function(event) { 
    
    setTimeout(() => {
      // document.querySelectorAll("h2")[0].onclick = unfiltertags;
      document.querySelectorAll(".artistsong").forEach(o=>{o.onclick=(oThis)=>{oThis.target.style.backgroundColor="pink"; }})
    }, "3000"); // wait three seconds to set onclick for h2 because doing it instantly on DOMContentLoaded says that unfiltertags is undefined?
    

  
}); </script>
<script type="text/javascript">document.addEventListener("DOMContentLoaded", function(event) { setTimeout(() => { 
function filterString(sString) {
    //if (typeof(oTag) == "string") { sTag = oTag; } else { sTag = oTag.innerText; }

    sString = sString.replaceAll(",", "").toLowerCase(); // remove extraneous comma
    
    // causes page to crash for some reason
    // $$$("h2").forEach(o=>o.style.display = "none");

    $$$a(".artistsong").forEach(oArtistSong=>{
        sCommentTag = oArtistSong.innerText.toLowerCase();
        

        if ((sCommentTag.length == 0) || (sCommentTag.indexOf(sString) == -1)) {
            oArtistSong.style.display = "none";
        } else {
            // console.log(oArtistSong.style);
            oArtistSong.style.display = "";
        }
    })
    
    // ok now remove extraneous h2s and br's so that everything is listed together nice and neatly
    document.querySelectorAll("h2").forEach(o=>{o.style.display = "none";});
    document.querySelectorAll("br").forEach(o=>{o.style.display = "none";});
    // ok now unhide the first h2 and replace its contents with tag.  I originally wanted to just make this first one an <h1> but my dollartreemarkdownify implementation doesn't do h1s and my music notes doesn't do h3s???
    document.querySelectorAll("h2")[0].style.display = "";
    document.querySelectorAll("h2")[0].innerText = sString;
    // britney - code here to replace contents of h1 with sTag name
    
}

if (oGetAllParameters_CLIENT().q) {
    filterString(oGetAllParameters_CLIENT().q);
}
if (oGetAllParameters_CLIENT().tag) {
    filtertags(oGetAllParameters_CLIENT().tag);
}



}, "1500"); }); </script>
<style>
.sCommentComments  {
  height: 30px;
  font-size: 6px;
  display: inline-block;
  overflow: scroll;
  width: 300px !important;
}
</style>


# August 2024
aaa
aaa
Michael Potter - The Rise of Analytic Philosopy (also some book by Calum Neil, Cadell Last, Kierkegaard, and Graham Priest) https://www.facebook.com/photo/?fbid=10228888889799156&set=a.10208244760988838
أمريكانلي
Proclus: A Commentary on the First Book of Euclid's Elements
Daniel Schmachtenberger's bookrecs - https://civilizationemerging.com/resources/books/
Andrzej Łobaczewski's Political Ponerology: A Science on the Nature of Evil Adjusted for Political Purposes https://www.youtube.com/watch?v=VpeWJZRgzZU&t=8h24m20s 
Bob Zadek's "The Anatomy of a Modern-Day Witch Hunt" || "How to spot a crybully" by Kier Recovering Anarchist
David Shields' How We Got Here - Melville + Nietzsche ÷ √Bloom x Zizek² = Bannon https://www.youtube.com/watch?v=VpeWJZRgzZU&t=4h19m20s
The Cosmic Landscape Book by Leonard Susskind // robinson // https://www.youtube.com/watch?v=_qv0c66XGuw&t=3438s
Lacan defaced / Lacan Debarbouille
"Aspiration: The Agency of Becoming" by Agnes Callard https://www.youtube.com/watch?v=rVoxUYaWTsQ
The Urth of the New Sun Novel by Gene Wolfe // sun
Stanisław Lem's Solaris // sun // https://x.com/IsliadaOrg/status/1801148276101546192

# July 2024
Holes (ya novel) https://old.reddit.com/r/redscarepod/comments/1e06szu/who_remembers_this_banger/



