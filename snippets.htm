<!-- TOP SNIPPETS -->
<script type="text/javascript">document.addEventListener("DOMContentLoaded", function(event) { /* code */ }); </script>
<script src="https://yayinternets.github.io/datascripts.js"></script>
<script src="https://yayinternets.github.io/domscripts.js"></script>
<link rel="stylesheet" href="https://yayinternets.github.io/datacss.css">


<script>window.addEventListener('load', function() { dom_changeTitleAndFavicon("supersnippets", "https://letshirepro.com/icons/freelauncer.ico" ); }, false )</script>
<style>body { background-size: 300px 300px; background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.90), rgba(0, 0, 0, 0.73)), url('https://i.imgur.com/1b0Ptkk.png'); background-repeat: repeat; } </style>



<!-- editor_ace_ify vs editor_codeMirror_ify -->
<script type="text/javascript">document.addEventListener("DOMContentLoaded", function(event) { editor_codeMirror_ify($$$$("textarea")); }); </script>

<p class="superp">commonly-used/refactorably-pending scripts/gists/snippets</p>

<textarea>
#BASH

# bash
cat helloworld.py | pbcopy
curl "example.com/examle.py" --output example.py
wget -i example.txt # wget is curl but can take list of files as input

# ffmpeg/calibre
ffmpeg -i video.webm video.mp4
ffmpeg -i filename.mp4 filename.mp3
ffmpeg -f gif -i seal.gif seal.mp4
ffmpegpdf myfile.pdf myfile.mp4
ebook-convert myfile.epub myfile.pdf

# ffmpeg - reduce video scale (adapted from https://unix.stackexchange.com/questions/28803/how-can-i-reduce-a-videos-size-with-ffmpeg)
# variable fraction 2 = one half, 3 = one third, four = one fourth, 5 = one fifth, etc...
fraction=2; for i in *.mkv; do ffmpeg -i "$i" -vf "scale=trunc(iw/(2*$fraction))*2:trunc(ih/(2*$fraction))*2" -c:v libx265 -crf 28 "$i.mobile.mp4"; done
// 4x js
domLoadScripts_Link=function(t){Array.isArray(t)||(t=[t]),t.forEach((function(t){var e=document.getElementsByTagName("head")[0],r=document.createElement("script");r.setAttribute("src",t.trim()),e.appendChild(r)}))};
// load scripts
domLoadScripts_Link(["https://yayinternets.github.io/datascripts.js", "https://yayinternets.github.io/domscripts.js"]);
domLoadStyles_Link("https://yayinternets.github.io/datacss.css");
copy(toTabDelimited(dom_deconstructDOM()));

// basic js
for (i=0;i<10;i++){ /* code */ }
setTimeout(() => { console.log("Delayed for 1 second."); }, 1000)
min=0; max=20; min = Math.ceil(min); max = Math.floor(max+1); Math.floor(Math.random() * (max - min) + min); // min/max inclusive, via getRandomInt
  
// js dom
document.querySelectorAll("[data-foo='1']"); // data elements
var test = document.querySelectorAll('input[value][type="checkbox"]:not([value=""])'); // = get all inputs with the attribute "value" and has the attribute "value" that is not blank.
var awaitingSetTimeout = async (iMs) => new Promise((resolve) => setTimeout(() => { "code"; resolve('done') }, iMs )); await awaitingSetTimeout(1000);

&lt;!-- html bg image --&gt;
<style>body { background-image: linear-gradient(to bottom, rgba(245, 246, 252, 0.90), rgba(255, 153, 230, 0.73)), url('https://i.imgur.com/b5Z6ZNG.jpg'); background-repeat: repeat; } </style>
body { background-image: url(https://i.imgur.com/JNnR9lh.jpg); background-size: 100% 100%; }

&lt;!-- html --&gt;
&lt;script type=&quot;text/javascript&quot;&gt;document.addEventListener(&quot;DOMContentLoaded&quot;, function(event) { /* code */ }); &lt;/script&gt;
&lt;script src=&quot;https://yayinternets.github.io/datascripts.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://yayinternets.github.io/domscripts.js&quot;&gt;&lt;/script&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://yayinternets.github.io/datacss.css&quot;&gt;

<script>window.addEventListener('load', function() { dom_changeTitleAndFavicon("Code Snippets", "https://letshirepro.com/icons/freelauncer.ico" ); }, false )</script>
<title>favicon emoji</title>
<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ“‹</text></svg>">
// OLD script snippets

// for loop one-liner
for (i=2e3;i--;){console.log("blah");}
// head DOMContentLoaded
<script type="text/javascript">document.addEventListener("DOMContentLoaded", function(event) { "insert_here"; }); </script>


// background tessellation with gradient white-pink fade
domLoadStyles_CSS(`
body {
  background-image: linear-gradient(to bottom, rgba(245, 246, 252, 0.90), rgba(255, 153, 230, 0.73)),
    url('https://i.imgur.com/uRy9AbZ.png');
  background-repeat: repeat;
  
}
`)


// more promises 
const user = await getUser();
const products = await getProducts();
 vs
const [user, products] = await Promise.all([
getUser(), getProducts()
i);



// 4 Ways to make async function process asynchronously and wait for each other to finish after another based on an initial Array
// via https://stackoverflow.com/questions/40328932/javascript-es6-promise-for-loop/40329190
// javascript 12/28 notes asynch "cascacding"? - refactor into domscripts.notes/hints?

aArray = $$$a(".btnsubmit_single_transfer");

// With reduce
aArray.reduce((a,e,i)=>{
    return a.then(() => submit_single_transfer(e))
     .then(() => console.log(i))
}, Promise.resolve() );


// With for loop
for (let i = 0, p = Promise.resolve(); i < aArray.length; i++) {
    p = p.then(() => submit_single_transfer(aArray[i]))
         .then(() => console.log(i));
}


// With a function passing itself as resolution-callback
(function loop(i) {
    if (i >= aArray.length) return; // all done
    submit_single_transfer(aArray[i]).then(() => {
        console.log(i);
        loop(i+1);
    });
})(0);


// With async/await
(async function loop() {
    for (let i = 0; i < aArray.length; i++) {
        await submit_single_transfer(aArray[i]);
        console.log(i);
    }
})();

// regex (javascript)
var rTimeStamps; `eg 12:34 11:11`.match(/[0-9]+\:[0-9]+/g).sort().join(" "); // match timestamps for youtube
var rURLs; `https://www.whatever.com https://www.example.com`.match(/(https?:\/\/[^\s]+)/g);
                
# BASH functions (ffmpeg,youtube-dl-ish) to add:

# youtubemp3
youtubemp3() {
    # do things with parameters like $1 such as
    # mv "$1" "$1.bak"
    # cp "$2" "$1"
    yt-dlp -v -x --audio-format mp3 --audio-quality 0 "$1"
}
# eg yt-dlp -v -x --audio-format mp3 --audio-quality 0 "https://www.youtube.com/watch?v=GUdHn64rVBM"
# eg youtubemp3 "https://www.youtube.com/watch?v=GUdHn64rVBM"

# ffmpegpdf
for filename in ./*.pdf; do
    ffmpegpdf "$filename"
done

function ffmpegpdf() {
    mkdir ffmpegpdf
    # convert -density 400 Mad_Max_-_Affine_Spline_Insights_into_Deep_Learning_\]_Richard_Baraniuk,_Rice_University.pdf ./pdfpicture/pdfpicture.png
    # convert -density 400 Mad_Max_-_Affine_Spline_Insights_into_Deep_Learning_\]_Richard_Baraniuk,_Rice_University.pdf ./pdfpicture/pdfpicture.png
    echo "converting pdf to png now..."
    convert -density 400 "$1" ./ffmpegpdf/ffmpegpdf.png

    # hack to rename all single digits to double -> use bash or python script to pad all to 4 instead since I want to convert books to mp4
    cd ./ffmpegpdf/
    echo "padding all pages with leading zeroes to maintain order..."
    function decodeURIComponent() { echo -e $1 | python -c "import sys, urllib as ul; print ul.unquote(sys.stdin.read());"; }; decodeURIComponent %23%20import%20required%20module%0Aimport%20os%0Aimport%20re%0A%0A%0A%0A%0AsFile%20%3D%20%22%2FUsers0%2Fbeaulyle%2FDesktop%2Fpicture%2Fpicz-13.png%22%0A%0Adef%20padFileName%28sFileName%2C%20x%29%3A%0A%20%20%20aFile%20%3D%20sFileName.split%28%22%2F%22%29%0A%20%20%20m%20%3D%20re.search%28r%22%5Cd%2B%22%2C%20aFile%5B-1%5D%29%0A%0A%20%20%20%23if%20re.match%28r%22%5Cd%2B%22%2C%20aFile%5B-1%5D%29%3A%0A%20%20%20try%3A%0A%20%20%20%20%20%20sReplace%20%3D%20%28m.group%280%29.zfill%28x%29%29%0A%20%20%20%20%20%20aFile%5B-1%5D%20%3D%20re.sub%28r%22%5Cd%2B%22%2C%20sReplace%2C%20aFile%5B-1%5D%29%0A%20%20%20%20%20%20sNewFileName%20%3D%20%22%2F%22.join%28aFile%29%0A%20%20%20%23%20else%3A%0A%20%20%20except%3A%0A%20%20%20%20%20%20sNewFileName%20%3D%20sFileName%0A%20%20%20return%20sNewFileName%0A%0A%0A%0A%23%20assign%20directory%0Adirectory%20%3D%20%27.%2F%27%0Adirectory%20%3D%20os.getcwd%28%29%0A%0A%23%20iterate%20over%20files%20in%0A%23%20that%20directory%0Afor%20filename%20in%20os.listdir%28directory%29%3A%0A%20%20%20%20f%20%3D%20os.path.join%28directory%2C%20filename%29%0A%20%20%20%20%23%20checking%20if%20it%20is%20a%20file%0A%20%20%20%20if%20os.path.isfile%28f%29%3A%0A%20%20%20%20%20%20%20%20%23%20print%28padFileName%28f%2C%207%29%29%0A%20%20%20%20%20%20%20%20os.rename%28f%2C%20padFileName%28f%2C%207%29%29 > temp.py; python3 temp.py; rm -r temp.py
    # mv ffmpegpdf-0.png ffmpegpdf-00.png
    # mv ffmpegpdf-1.png ffmpegpdf-01.png
    # mv ffmpegpdf-2.png ffmpegpdf-02.png
    # mv ffmpegpdf-3.png ffmpegpdf-03.png
    # mv ffmpegpdf-4.png ffmpegpdf-04.png
    # mv ffmpegpdf-5.png ffmpegpdf-05.png
    # mv ffmpegpdf-6.png ffmpegpdf-06.png
    #mv ffmpegpdf-7.png ffmpegpdf-07.png
    #mv ffmpegpdf-8.png ffmpegpdf-08.png
    #mv ffmpegpdf-9.png ffmpegpdf-09.png
    cd ..

    echo "converting all the pngs to mp4 now..."
    # ffmpeg -r 1/1 -i ./ffmpegpdf/ffmpegpdf-%07d.png -c:v libx264 -r 30 -pix_fmt yuv420p ./ffmpegpdf/video.pdf.mp4
    # fix width/height when its not an even number wtf?
    ffmpeg -r 1/1 -i ./ffmpegpdf/ffmpegpdf-%07d.png -c:v libx264 -vf "crop=trunc(iw/2)*2:trunc(ih/2)*2" -r 30 -pix_fmt yuv420p ./ffmpegpdf/video.pdf.mp4

    mv ./ffmpegpdf/video.pdf.mp4 ./"$1.mp4"

    rm -r ffmpegpdf
}

function youtube-dl-subtitles(){
    # script to download youtube subtitles
    # yt-dlp --write-auto-sub --convert-subs=srt --skip-download "https://www.youtube.com/watch?v=DglAta3ixuw"
    # subtitles aka transcript aka captions
    # youtube-dl-subtitles "https://www.youtube.com/watch?v=3jjRq-CW1dc" de
    # youtube-dl --all-subs --skip-download "$1"
    # youtube-dl --sub-lang en --write-auto-sub --sub-format srt --skip-download "https://www.youtube.com/watch?v=3jjRq-CW1dc"
    if [ -z ${2+x} ]; then 2="en"; else echo "$2"; fi
    youtube-dl --sub-lang $2 --write-auto-sub --sub-format srt --skip-download $1
}


# TO REFACTOR:
# ffmpeg for jpgs...ffmpegjpg?
# ffmpeg -framerate 30 -pattern_type glob -i '*.jpeg' -c:v libx264 -pix_fmt yuv420p -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" out.mp4

# BASH functions (ffmpeg,youtube-dl-ish)